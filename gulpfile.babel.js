"use strict";

import fs from "fs";

import gulp from "gulp";
import concat from "gulp-concat";
import insert from "gulp-inject-string";
import sourcemaps from "gulp-sourcemaps";
import envify from "gulp-envify";
import dotenv from "dotenv";
import gulpSize from "gulp-size";
import gulpUglify from "gulp-uglify";
import gulpIf from "gulp-if";
import { argv } from "yargs";

// Configuration
// ========================================================
const OUTPUT_DIR = "./dist";
const MANIFEST_FILE_NAME = "manifest.json";
const CASES_DIR = "cases/";
const enableSourcemaps = !!argv.sourcemaps;
const enableMinify = !!argv.minify;
const { parsedEnvs } = dotenv.config();

// Generate gulp tasks based on directories in CASES_DIR
generateTasks(CASES_DIR);

// Helpers
// ========================================================

function generateTasks(basePath) {
  const allTasksWithManifest = fs
    .readdirSync(basePath)
    .reduce(prepareTasks, {});

  const tasksNames = Object.keys(allTasksWithManifest)

  Object.entries(allTasksWithManifest)
    .forEach(([taskName, manifest]) => gulp.task(taskName, () => (buildPipeline(manifest, taskName + ".js"))));

  exports.watch = gulp.task("watch", () => {
    gulp.watch(
      [`${CASES_DIR}**/*.js`, "components/**/*.js"],
      { queue: true },
      gulp.parallel(tasksNames)
    );
  });

  exports.default = gulp.parallel(tasksNames);
}

function buildPipeline(manifestFile, outputFileName) {
  return gulp
    .src(manifestFile, { base: "." })
    .pipe(envify(parsedEnvs))
    .pipe(gulpIf(enableSourcemaps, sourcemaps.init()))
    .pipe(concat(outputFileName))
    .pipe(insert.wrap(getBanner(), getFooter()))
    .pipe(gulpIf(enableMinify, gulpUglify({
      compress: true
    })))
    .pipe(gulpIf(enableSourcemaps, sourcemaps.write()))
    .pipe(gulpSize({
      gzip: true,
      showFiles: true
    }))
    .pipe(gulp.dest(OUTPUT_DIR));
}

function prepareTasks (acc, taskName) {
  const stats = fs.statSync(CASES_DIR + taskName);
  if (stats.isDirectory()) {
    try {
      const manifest = JSON.parse(
        fs.readFileSync(CASES_DIR + taskName + "/" + MANIFEST_FILE_NAME)
      );

      console.log("====> Defining test case '" + taskName + "' with manifest: ", manifest);

      return {
        ...acc,
        [taskName]: manifest
      }
    } catch (e) {
      console.error(e)
      console.error("====> Could not load manifest file for: " + taskName);
      process.exit(1);
    }
  }
  return acc
}

function getBanner() {
  return `//
// This file is automatically generated.
//
// (!!!) DO NOT MODIFY DIRECTLY! (!!!)
//\n\n`;
}

function getFooter() {
  return `
// (!!!) DO NOT REMOVE OR CHANGE THE FOLLOWING LINES! (!!!)`;
}
